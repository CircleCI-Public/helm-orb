description: |
  Upgrades an existing helm chart
  Requirements: helm should be installed on the cluster
  and kubeconfig should be configured to connect to the cluster.

parameters:
  chart:
    description: |
      Specify for upgrade a chart reference (e.g. stable/mariadb),
      or a path to a packaged chart (e.g. ./nginx-1.2.3.tgz),
      or a path to an unpacked chart directory (e.g. ./nginx)
      or an absolute URL (e.g. https://example.com/charts/nginx-1.2.3.tgz)
    type: string
    default: ""
  release-name:
    description: |
      Specify a name for the release.
    type: string
    default: ""
  namespace:
    description: |
      The kubernetes namespace that should be used.
    type: string
    default: ""
  wait:
    description: |
      Whether to wait for the installation to be complete.
    type: boolean
    default: true
  wait-for-jobs:
    description: |
      Whether to wait until all Jobs have been completed before marking the release as successful.
    type: boolean
    default: true
  timeout:
    description: |
      If timeout is reached, the release will be marked as FAILED.
    type: string
    default: ""
  tls:
    description: |
      Enable TLS for the request
    type: boolean
    default: false
  tls-ca-cert:
    description: |
      Path to TLS CA certificate file
    type: string
    default: ""
  tls-cert:
    description: |
      Path to TLS certificate file
    type: string
    default: ""
  tls-hostname:
    description: |
      The server name used to verify the hostname on the returned
      certificates from the server
    type: string
    default: ""
  tls-key:
    description: |
      Path to TLS key file
    type: string
    default: ""
  tls-verify:
    description: |
      Enable TLS for request and verify remote
    type: boolean
    default: false
  tiller-namespace:
    description: |
      Specify the namespace of Tiller
    type: string
    default: ""
  no-hooks:
    description: |
      This skips running hooks for the command
    type: boolean
    default: false
  devel:
    description: |
      Use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
    type: string
    default: ""
  dry-run:
    description: |
      simulate an upgrade
    type: boolean
    default: false
  force:
    description: |
      Use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
    type: boolean
    default: false
  reset-values:
    description: |
      when upgrading, reset the values to the ones built into the chart
    type: boolean
    default: false
  reuse-values:
    description: |
      when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored.
    type: boolean
    default: false
  values:
    description: |
      specify values in a YAML file or a URL
    type: string
    default: ""
  version:
    description: |
      specify the exact chart version to use. If this is not specified, the latest version is used
    type: string
    default: ""
  recreate-pods:
    description: |
      performs pods restart for the resource if applicable
    type: boolean
    default: false
  values-to-override:
    description: |
      Override values in a chart using the --set flag of the helm upgrade
      command. Format: key1=val1,key2=val2
    type: string
    default: ""
  update-repositories:
    description: |
      Choose to update repositories by running helm repo update.
    type: boolean
    default: true
  helm-version:
    type: string
    default: "v2.16.9"
    description: the helm client version to install. e.g. v2.4.0
  no-output-timeout:
    description: |
      Elapsed time that the helm command can run on CircleCI without output.
      The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
    type: string
    default: "30m"
  atomic:
    description: |
      if set, upgrade process rolls back changes made in case of failed upgrade.
      The --wait flag will be set automatically if --atomic is used
    type: boolean
    default: false
steps:
  - install-helm-client:
      version: << parameters.helm-version >>
  - when:
      condition: << parameters.update-repositories >>
      steps:
        - run:
            name: Update repositories
            command: |
              helm repo update
  - run:
      name: Upgrade or install chart
      command: |
        TIMEOUT="<< parameters.timeout >>"
        ATOMIC="<< parameters.atomic >>"
        WAIT="<< parameters.wait >>"
        WAIT_FOR_JOBS="<< parameters.wait-for-jobs >>"
        NO_HOOKS="<< parameters.no-hooks >>"
        RECREATE_PODS="<< parameters.recreate-pods >>"
        TLS="<< parameters.tls >>"
        TLS_CA_CERT="<< parameters.tls-ca-cert >>"
        TLS_CERT="<< parameters.tls-cert >>"
        TLS_HOSTNAME="<< parameters.tls-hostname >>"
        TLS_KEY="<< parameters.tls-key >>"
        TLS_VERIFY="<< parameters.tls-verify >>"
        TILLER_NAMESPACE="<< parameters.tiller-namespace >>"
        NAMESPACE="<< parameters.namespace >>"
        DEVEL="<< parameters.devel >>"
        DRY_RUN="<< parameters.dry-run >>"
        RESET_VALUES="<< parameters.reset-values >>"
        REUSE_VALUES="<< parameters.reuse-values >>"
        VALUES="<< parameters.values >>"
        VERSION="<< parameters.version >>"
        VALUES_TO_OVERRIDE="<< parameters.values-to-override >>"
        if [ -n "${NAMESPACE}" ]; then
          set -- "$@" --namespace="${NAMESPACE}"
        fi
        if [ -n "${TIMEOUT}" ]; then
          set -- "$@" --timeout "${TIMEOUT}"
        fi
        if [ -n "${NO_HOOKS}" ]; then
          set -- "$@" --no-hooks="${NO_HOOKS}"
        fi
        if [ "${RECREATE_PODS}"  == "true" ]; then
          set -- "$@" --recreate-pods
        fi
        if [ "${ATOMIC}" == "true" ]; then
          set -- "$@" --atomic
        fi
        if [ "${WAIT}" == "true" ]; then
          set -- "$@" --wait
        fi
        if [ "${WAIT_FOR_JOBS}" == "true" ]; then
          set -- "$@" --wait-for-jobs
        fi
        if [ "${TLS}" == "true" ]; then
          set -- "$@" --tls
        fi
        if [ -n "${TLS_CA_CERT}" ]; then
          set -- "$@" --tls-ca-cert="${TLS_CA_CERT}"
        fi
        if [ -n "${TLS_CERT}" ]; then
          set -- "$@" --tls-cert="${TLS_CERT}"
        fi
        if [ -n "${TLS_HOSTNAME}" ]; then
          set -- "$@" --tls-hostname="${TLS_HOSTNAME}"
        fi
        if [ -n "${TLS_KEY}" ]; then
          set -- "$@" --tls-key="${TLS_KEY}"
        fi
        if [ "${TLS_VERIFY}" == "true" ]; then
          set -- "$@" --tls-verify
        fi
        if [ -n "${TILLER_NAMESPACE}" ]; then
          set -- "$@" --tiller-namespace "${TILLER_NAMESPACE}"
        fi
        if [ -n "${DEVEL}" ]; then
          set -- "$@" --devel "${DEVEL}"
        fi
        if [ "${DRY_RUN}" == "true" ]; then
          set -- "$@" --dry-run
        fi
        if [ "${RESET_VALUES}" == "true" ]; then
          set -- "$@" --reset-values
        fi
        if [ "${REUSE_VALUES}" == "true" ]; then
          set -- "$@" --reuse-values
        fi
        if [ -n "${VALUES}" ]; then
          set -- "$@" --values "${VALUES}"
        fi
        if [ -n "${VALUES_TO_OVERRIDE}" ]; then
          set -- "$@" --set "${VALUES_TO_OVERRIDE}"
        fi
        if [ -n "${VERSION}" ]; then
          set -- "$@" --version="${VERSION}"
        fi
        helm upgrade --install << parameters.release-name >> << parameters.chart >> "$@"
      no_output_timeout: << parameters.no-output-timeout >>
